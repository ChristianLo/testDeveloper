# Generated by Django 4.1.6 on 2023-05-17 13:58

from django.db import migrations, transaction
import requests as req

@transaction.atomic
def migrate_data(apps, schema_editor):
    # Load models
    Station = apps.get_model('Tarea1', 'Station')
    Location = apps.get_model('Tarea1', 'Location')
    PaymentType = apps.get_model('Tarea1', 'PaymentType')
    PaymentStation = apps.get_model('Tarea1', 'PaymentStation')
    StationState = apps.get_model('Tarea1', 'StationState')
    
    # Define data to be inserted
    bikerio = req.get('https://api.citybik.es/v2/networks/bikerio').json()
    data = bikerio['network']['stations']
    indexPayment = 1

    # Insert data
    for station in data:
        Station.objects.create(
            id=station['id'],
            uid=station['extra']['uid'],
            name=station['name'],
            slots=station['extra']['slots'],
            payment_terminal=station['extra']['payment-terminal'],
            has_ebike=station['extra']['has_ebikes'],
        )
        Location.objects.create(
            id_station=Station.objects.get(id=station['id']),
            latitude=station['latitude'],
            longitude=station['longitude'],
            altitude=station['extra']['altitude'] if station['extra']['altitude'] else 0,
            address=station['extra']['address'],
            city=bikerio['network']['location']['city'],
            country=bikerio['network']['location']['country'],
        )
        for payment_type in station['extra']['payment']:
            if not PaymentType.objects.filter(name=payment_type).exists():
                PaymentType.objects.create(
                    id=f'{indexPayment}',
                    name=payment_type,
                )
                indexPayment += 1
            PaymentStation.objects.create(
                id_station=Station.objects.get(id=station['id']),
                id_payment_type=PaymentType.objects.get(name=payment_type),
            )
        StationState.objects.create(
            id_station=Station.objects.get(id=station['id']),
            empty_slots=station['empty_slots'],
            normal_bikes=station['extra']['normal_bikes'],
            electric_bikes=station['extra']['ebikes'],
            renting=station['extra']['renting'],
            returning=station['extra']['returning'],
            last_update=station['timestamp'],
        )


class Migration(migrations.Migration):

    dependencies = [
        ('Tarea1', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(migrate_data),
    ]
